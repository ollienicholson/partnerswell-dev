// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// use @@index[column] to sort by index 

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
    ADMIN
    GUEST
}

model userRoles {
    clerkId      String  @unique
    role         Role
    firefliesApi String?

    @@index([clerkId, role])
}

model PartnerAccount {
    partnerAccountId Int                  @id @default(autoincrement())
    accountName      String
    contactName      String
    createdBy        String?
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
    transcripts      CallTranscriptData[] // one-to-many relationship

    @@index([partnerAccountId])
}

model CallTranscriptData {
    id                  Int             @id @default(autoincrement())
    callTranscriptId    String          @unique
    callTranscriptTitle String
    createdAt           DateTime        @default(now())
    accountId           Int? // Partner Account FK can be NULL
    partnerAccount      PartnerAccount? @relation(fields: [accountId], references: [partnerAccountId], onDelete: SetNull)

    //     Duration Int // in minutes
    //     Speakers Speakers[]
    //     partnerAccount            PartnerAccount             @relation(fields: [accountId], references: [partnerAccountId])
    //     accountId                 Int                        @unique
    //     CallTranscriptDefaultText CallTranscriptDefaultText?
    //     CallTranscriptSnippet     CallTranscriptSnippet[]

    @@index([id])
}

// model CallTranscriptDefaultText {
//     callTranscriptDefaultTextId Int                @id @default(autoincrement())
//     transcriptText              String
//     callTranscript              CallTranscriptData @relation(fields: [callTranscriptId], references: [callTranscriptId])
//     callTranscriptId            Int                @unique

//     @@index([callTranscriptDefaultTextId])
// }

// // do they all need to be foreign keys or can they be relations?

// model CallTranscriptSnippet {
//     callTranscriptSnippetId Int                @id @default(autoincrement())
//     callTranscript          CallTranscriptData @relation(fields: [callTranscriptId], references: [callTranscriptId])
//     callTranscriptId        Int                @unique
//     snippetText             String
//     InInPhaseLabels         InInPhaseLabel[]
//     MaMaPhaseLabels         MaMaPhaseLabel[]

//     @@index([callTranscriptSnippetId])
// }

// model CallTranscriptCategory {
//     callTranscriptCategoryId   Int    @id @default(autoincrement())
//     callTranscriptCategoryName String
// }

// model InInPhaseLabel {
//     inInPhaseLabelId Int                   @id @default(autoincrement())
//     labelName        String
//     callTranscript   CallTranscriptSnippet @relation(fields: [callTranscriptId], references: [callTranscriptSnippetId])
//     callTranscriptId Int                   @unique

//     @@index([inInPhaseLabelId])
// }

// model MaMaPhaseLabel {
//     mamaPhaseLabelId Int                   @id @default(autoincrement())
//     labelName        Int
//     callTranscript   CallTranscriptSnippet @relation(fields: [callTranscriptId], references: [callTranscriptSnippetId])
//     callTranscriptId Int                   @unique

//     @@index([mamaPhaseLabelId])
// }
